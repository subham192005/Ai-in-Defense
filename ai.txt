{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green29\blue164;\red9\green9\blue9;\red121\green121\blue121;
\red18\green51\blue230;\red17\green109\blue18;\red160\green0\blue163;\red128\green63\blue122;\red0\green0\blue109;
\red10\green79\blue103;\red82\green0\blue135;\red109\green109\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c11373\c64314;\csgenericrgb\c3529\c3529\c3529;\csgenericrgb\c47451\c47451\c47451;
\csgenericrgb\c7059\c20000\c90196;\csgenericrgb\c6667\c42745\c7059;\csgenericrgb\c62745\c0\c63922;\csgenericrgb\c50196\c24706\c47843;\csgenericrgb\c0\c0\c42745;
\csgenericrgb\c3922\c30980\c40392;\csgenericrgb\c32157\c0\c52941;\csgenericrgb\c42745\c42745\c42745;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 import \cf3 pygame\
\cf2 import \cf3 random\
\cf2 import \cf3 numpy \cf2 as \cf3 np\
\cf2 import \cf3 tensorflow \cf2 as \cf3 tf\
\

\f1\i \cf4 # Define constants\

\f0\i0 \cf3 WIDTH = \cf5 800\
\cf3 HEIGHT = \cf5 600\
\cf3 FPS = \cf5 60\
\cf3 MISSILE_SPEED = \cf5 5\
\cf3 CITY_X = \cf5 300\
\cf3 CITY_Y = \cf5 550\
\cf3 CITY_WIDTH = \cf5 200\
\cf3 CITY_HEIGHT = \cf5 50\
\cf3 MAX_MISSILES = \cf5 10\
\cf3 GAMMA = \cf5 0.9\
\cf3 EPSILON = \cf5 0.1\
\cf3 LEARNING_RATE = \cf5 0.1\
\

\f1\i \cf4 # Define colors\

\f0\i0 \cf3 WHITE = (\cf5 255\cf3 , \cf5 255\cf3 , \cf5 255\cf3 )\
BLACK = (\cf5 0\cf3 , \cf5 0\cf3 , \cf5 0\cf3 )\
RED = (\cf5 255\cf3 , \cf5 0\cf3 , \cf5 0\cf3 )\
\

\f1\i \cf4 # Initialize Pygame\

\f0\i0 \cf3 pygame.init()\
pygame.mixer.init()\
screen = pygame.display.set_mode((WIDTH, HEIGHT))\
pygame.display.set_caption(\cf6 "Missile Defense System Simulation"\cf3 )\
clock = pygame.time.Clock()\
\
\

\f1\i \cf4 # Define classes\

\f0\i0 \cf2 class \cf0 Missile\cf3 (pygame.sprite.Sprite):\
    \cf2 def \cf7 __init__\cf3 (\cf8 self\cf3 ):\
        \cf9 super\cf3 ().\cf7 __init__\cf3 ()\
        \cf8 self\cf3 .image = pygame.Surface((\cf5 10\cf3 , \cf5 30\cf3 ))\
        \cf8 self\cf3 .image.fill(RED)\
        \cf8 self\cf3 .rect = \cf8 self\cf3 .image.get_rect()\
        \cf8 self\cf3 .rect.x = random.randrange(\cf5 0\cf3 , WIDTH)\
        \cf8 self\cf3 .rect.y = \cf5 0\
\
    \cf2 def \cf10 update\cf3 (\cf8 self\cf3 ):\
        \cf8 self\cf3 .rect.y += MISSILE_SPEED\
        \cf2 if \cf8 self\cf3 .rect.y > HEIGHT:\
            \cf8 self\cf3 .kill()\
\
\
\cf2 class \cf0 City\cf3 (pygame.sprite.Sprite):\
    \cf2 def \cf7 __init__\cf3 (\cf8 self\cf3 ):\
        \cf9 super\cf3 ().\cf7 __init__\cf3 ()\
        \cf8 self\cf3 .image = pygame.Surface((CITY_WIDTH, CITY_HEIGHT))\
        \cf8 self\cf3 .image.fill(WHITE)\
        \cf8 self\cf3 .rect = \cf8 self\cf3 .image.get_rect()\
        \cf8 self\cf3 .rect.x = CITY_X\
        \cf8 self\cf3 .rect.y = CITY_Y\
\
\
\cf2 class \cf0 MissileDefenseSystem\cf3 (pygame.sprite.Sprite):\
    \cf2 def \cf7 __init__\cf3 (\cf8 self\cf3 ):\
        \cf9 super\cf3 ().\cf7 __init__\cf3 ()\
        \cf8 self\cf3 .image = pygame.Surface((\cf5 30\cf3 , \cf5 30\cf3 ))\
        \cf8 self\cf3 .image.fill(BLACK)\
        \cf8 self\cf3 .rect = \cf8 self\cf3 .image.get_rect()\
        \cf8 self\cf3 .rect.x = CITY_X + CITY_WIDTH / \cf5 2 \cf3 - \cf5 15\
        \cf8 self\cf3 .rect.y = CITY_Y - \cf5 30\
\
    \cf2 def \cf10 update\cf3 (\cf8 self\cf3 ):\
        \cf2 if \cf8 self\cf3 .rect.x < \cf5 0\cf3 :\
            \cf8 self\cf3 .rect.x = \cf5 0\
        \cf2 elif \cf8 self\cf3 .rect.x > WIDTH - \cf5 30\cf3 :\
            \cf8 self\cf3 .rect.x = WIDTH - \cf5 30\
\
\

\f1\i \cf4 # Define functions\

\f0\i0 \cf2 def \cf10 get_state\cf3 (city, missile):\
    state = []\
    state.append(city.rect.x)\
    state.append(city.rect.y)\
    state.append(missile.rect.x)\
    state.append(missile.rect.y)\
    \cf2 return \cf3 np.array(state)\
\
\
\cf2 def \cf10 choose_action\cf3 (state, model, epsilon):\
    \cf2 if \cf3 random.uniform(\cf5 0\cf3 , \cf5 1\cf3 ) < epsilon:\
        action = random.randint(\cf5 0\cf3 , \cf5 2\cf3 )\
    \cf2 else\cf3 :\
        action = np.argmax(model.predict(np.array([state]))[\cf5 0\cf3 ])\
    \cf2 return \cf3 action\
\
\
\cf2 def \cf10 update_q_table\cf3 (q_table, state, action, reward, next_state):\
    predict = q_table.predict(np.array([state]))[\cf5 0\cf3 ]\
    target = reward + GAMMA * np.max(q_table.predict(np.array([next_state]))[\cf5 0\cf3 ])\
    predict[action] = predict[action] + LEARNING_RATE * (target - predict[action])\
    q_table.fit(np.array([state]), np.array([predict]), \cf11 epochs\cf3 =\cf5 1\cf3 , \cf11 verbose\cf3 =\cf5 0\cf3 )\
\
\
\cf2 def \cf10 train_model\cf3 (q_table, episodes):\
    \cf2 for \cf3 episode \cf2 in \cf9 range\cf3 (episodes):\
        city = City()\
        missile_defense_system = MissileDefenseSystem()\
        all_sprites = pygame.sprite.Group()\
        all_sprites.add(city)\
        all_sprites.add(missile_defense_system)\
        missiles = pygame.sprite.Group()\
        score =\cf5 0\
        \cf3 done = \cf2 False\
        while not \cf3 done:\
            
\f1\i \cf4 # Generate new missile\
            
\f0\i0 \cf2 if \cf9 len\cf3 (missiles) < MAX_MISSILES:\
                missile = Missile()\
                all_sprites.add(missile)\
                missiles.add(missile)\
\
            
\f1\i \cf4 # Get current status\
            # Get current state\
            
\f0\i0 \cf3 state = get_state(city, missile)\
\
            
\f1\i \cf4 # Choose action\
            
\f0\i0 \cf3 action = choose_action(state, q_table, EPSILON)\
\
            
\f1\i \cf4 # Perform action\
            
\f0\i0 \cf2 if \cf3 action == \cf5 0\cf3 :\
                missile_defense_system.rect.x -= \cf5 5\
            \cf2 elif \cf3 action == \cf5 2\cf3 :\
                missile_defense_system.rect.x += \cf5 5\
\
            
\f1\i \cf4 # Update sprites\
            
\f0\i0 \cf3 all_sprites.update()\
\
            
\f1\i \cf4 # Check for collision\
            
\f0\i0 \cf3 hits = pygame.sprite.spritecollide(missile_defense_system, missiles, \cf2 False\cf3 )\
            \cf2 if \cf3 hits:\
                reward = \cf5 100\
                \cf3 done = \cf2 True\
                for \cf3 missile \cf2 in \cf3 hits:\
                    missile.kill()\
            \cf2 else\cf3 :\
                reward = -\cf5 1\
\
            
\f1\i \cf4 # Get next state\
            
\f0\i0 \cf2 if \cf9 len\cf3 (missiles) > \cf5 0\cf3 :\
                next_state = get_state(city, missiles.sprites()[\cf5 0\cf3 ])\
            \cf2 else\cf3 :\
                next_state = \cf2 None\
\
            
\f1\i \cf4 # Update Q-table\
            
\f0\i0 \cf2 if \cf3 next_state \cf2 is not None\cf3 :\
                update_q_table(q_table, state, action, reward, next_state)\
\
            
\f1\i \cf4 # Set current state to next state\
            
\f0\i0 \cf12 state \cf3 = next_state\
\
            
\f1\i \cf4 # Display game\
            
\f0\i0 \cf3 screen.fill((\cf5 255\cf3 , \cf5 255\cf3 , \cf5 255\cf3 ))\
            all_sprites.draw(screen)\
            pygame.display.flip()\
\
            
\f1\i \cf4 # Increase score\
            
\f0\i0 \cf3 score += reward\
\
            
\f1\i \cf4 # Reset game if done\
            
\f0\i0 \cf2 if \cf3 done:\
                \cf9 print\cf3 (\cf6 "Episode:"\cf3 , episode + \cf5 1\cf3 , \cf6 "Score:"\cf3 , score)\
                \cf2 if \cf3 episode % \cf5 100 \cf3 == \cf5 0\cf3 :\
                    \cf9 print\cf3 (q_table)  
\f1\i \cf4 # Print Q-table every 100 episodes\
                
\f0\i0 \cf2 if \cf3 episode % \cf5 1000 \cf3 == \cf5 0\cf3 :\
                    save_q_table(q_table)  
\f1\i \cf4 # Save Q-table every 1000 \
                
\f0\i0 \cf3 all_sprites.empty()\
                missiles.empty()\
                city = City()\
                missile_defense_system = MissileDefenseSystem()\
                all_sprites.add(city)\
                all_sprites.add(missile_defense_system)\
\
\
\
}